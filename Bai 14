Cach 1: Dung Set, ArrayList=> Collections.sort dua tren cai List chua EntrySet
import java.util.*;
import java.util.Map.Entry;
public class Main
{
    public static boolean check(int n){
        while (n!=0){
            int res=n%10;
            n/=10;
            if (res<n%10) return false;
        }
        return true;
    }
	public static void main(String[] args) {
	    int[] a={123,234,455,94,98,234,455,455,234};
	    LinkedHashMap<Integer,Integer> map=new LinkedHashMap<>();
	    for (int i=0; i<a.length; i++){
	        int x=a[i];
	        if (check(x)==true){
	            if (map.containsKey(x)){
	                int real=map.get(x);
	                real++;
	                map.put(x,real);
	            }
	            else map.put(x,1);
	        }
	    }
		//LinkedHashMap<Integer,Integer> map=new LinkedHashMap<>();
		Set<Entry<Integer,Integer>> set=map.entrySet();// luu cac phan tu cua map vao set
		Comparator<Entry<Integer,Integer>> cmp=new Comparator<>(){
		    public int compare(Entry<Integer, Integer> e1, Entry<Integer,Integer> e2){
		        Integer v1=e1.getValue();
		        Integer v2=e1.getKey();
		        Integer v3=e2.getValue();
		        Integer v4=e2.getKey();
		        if (v1==v3) return v2-v4;
		        else return v3-v1;
		    }
		};
		ArrayList<Entry<Integer,Integer>> list=new ArrayList<>(set);
		Collections.sort(list,cmp);
		for (Entry<Integer,Integer> x:list){
		    System.out.print(x.getKey()+" "+x.getValue()+" ");
		}
	}
}
C2: Dung mang hai chieu de luu cai phan EntrySet roi duyet
import java.util.*;
import java.util.Map.Entry;
public class Main
{
    public static boolean check(int n){
        while (n!=0){
            int res=n%10;
            n/=10;
            if (res<n%10) return false;
        }
        return true;
    }
	public static void main(String[] args) {
	    int[] a={123,234,455,94,98,234,455,455,234};
	    LinkedHashMap<Integer,Integer> map=new LinkedHashMap<>();
	    for (int i=0; i<a.length; i++){
	        int x=a[i];
	        if (check(x)==true){
	            if (map.containsKey(x)){
	                int real=map.get(x);
	                real++;
	                map.put(x,real);
	            }
	            else map.put(x,1);
	        }
	    }
		//LinkedHashMap<Integer,Integer> map=new LinkedHashMap<>();
		int i=0;
		Integer[][] arr=new Integer[map.size()][2];
		Set<Map.Entry<Integer,Integer>> set=map.entrySet();
		for (Map.Entry<Integer,Integer> x:set){
		    arr[i][0]=x.getKey();
		    arr[i][1]=x.getValue();
		    i++;
		}
		Arrays.sort(arr,new Comparator<Integer[]>(){
		    public int compare(Integer[] o1, Integer[] o2){
		        if (o1[1]!=o2[1]) return o2[1]-o1[1];
		        else return o1[0]-o2[0];
		    }
		});
		for (int j=0; j<i; j++){
		    System.out.print(arr[j][0]+" "+arr[j][1]+" ");
		}
	}
}
